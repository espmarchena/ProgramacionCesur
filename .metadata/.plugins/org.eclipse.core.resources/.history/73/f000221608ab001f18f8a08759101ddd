package proyecto;

import java.util.Scanner;

public class AltaUsuarios {
	static Scanner sc; // DECLARO SCANNER FUERA DE LOS AMBITOS DE LAS FUNCIONES PARA PODERLO USAR EN TODAS

	// DECLARACION DE ARRAYS PARA GUARDAR INFORMACION DE LOS USUARIOS (FUERA DE LOS AMBITOS DE LAS FUNCIONES PARA PODERLO USAR EN TODAS)
	static String[] nombres = new String[100];
    static String[] apellidos = new String[100];  /*String datos[][]= {{"Esperanza", "Marchena", "26264464M", "espe@a.com"},   //si quiero el dni de la primera persona es [0][2]
													{"Jesus", "Marchena"},
													{"Ana", "Moreno"}}; */
    static String[] mails = new String[100];
    static String[] telefonos = new String[100];
    static String[] dnis = new String[100];                      //cada fila es una persona diferente, la i tiene que ir aumentando para ir cambiando de persona 
    static String[] fechasNacimiento = new String[100];
    static String[] logins = new String[100];
    static String[] passwords = new String[100];
    //variable para una de las funciones de validar
    static String[] datos = new String[3];
    //variables del mail:
    static boolean esValido= false;
    static boolean tieneArroba = false;
    static boolean tienePunto = false;
    
    
    static int contadorUsuarios = 0; // Contador de usuarios registrados
	
    public static void main(String[] args) {
    	sc = new Scanner(System.in);

        
        // Bucle de registro de usuarios
        while (true) {
            System.out.println("\n--- Alta de Usuario ---");
            
            // Validar y almacenar nombre y apellido
            String nombre = Validar("Nombre");
            String apellido = Validar("Apellido");
            
            // Guardar en los arrays
            nombres[contadorUsuarios] = nombre;
            apellidos[contadorUsuarios] = apellido;
         
   
            //VALIDAR EMAIL
            bucleMail();
                           
           
           // VALIDAR TELEFONO (9 caracteres y solo numéricos)
            telefonos[contadorUsuarios] = pedirTelefonoValido();
            
          
            
            //VALIDAR DNI´S
            dnis[contadorUsuarios] = pedirDniValido();
            
            
           
            //VALIDAR FECHA DE NACIMIENTO
            fechasNacimiento[contadorUsuarios] = pedirFechaNacimientoValida();

          
    		 
            // Validar login
            String login = Validar("Login");
            logins[contadorUsuarios] = login;


            
            // VALIDAR PASWORD 
            passwords[contadorUsuarios] = pedirPasswordValida();

            contadorUsuarios++;

                     
            
            //AGREGAR OTRO USUARIO
            pedirDato("¿Desea agregar otro usuario? (s/n): ");
            String respuesta = sc.nextLine();
            if (respuesta.equals("n")) {
                break; // Salir del bucle si el usuario elige "n"
            }
        }
        
        
        //MOSTRAR LA LISTA DE USUARIOS REGISTRADOS
        System.out.println("\n--- Usuarios Registrados ---");
        for (int i = 0; i < contadorUsuarios; i++) {
            System.out.println("Usuario #" + (i + 1));
            System.out.println("Nombre: " + nombres[i]);
            System.out.println("Apellido: " + apellidos[i]);
            System.out.println("Email: " + mails[i]);
            System.out.println("Teléfono: " + telefonos[i]);
            System.out.println("DNI: " + dnis[i]);
            System.out.println("Fecha de Nacimiento: " + fechasNacimiento[i]);
            System.out.println("Login: " + logins[i]);
            System.out.println("Password: " + passwords[i]);
            System.out.println();
        }
        
        
        String opcion="";
        
        do {
			System.out.println("¿Qué deseas hacer?");
			System.out.println("Opcion 1. Vender");
			System.out.println("Opcion 1. Comprar");
			
			opcion = sc.nextLine();
			
			switch (opcion) {
				case "1":
					//meter funcion dentro de este switch que haga otro switch para esta pregunta
					opcion(opcion);
					
					
					
					break;
					
					
				case "2":
					System.out.println("Comprar");
					break;
					
				default:
					System.out.println("Opción incorrecta.");
			}		
		}			
        while(!opcion.equals("0"));	
        
        
        
        
        
        sc.close(); 
    }
    
    public static String preguntaRespuesta (String respuesta) {
    pedirDato("¿Desea vender más articulos? (s/n): ");
    respuesta = sc.nextLine();
    if (respuesta.equals("n")) {
        break; // Salir del bucle si el usuario elige "n"
        
        return respuesta;
    }
    
    //FUNCION DEL SWITCH MENU VENTA
    public static String opcion (String opcion) {
    	  
        final int PRECIO_CAMISETAS= 5;
        final int PRECIO_PANTALONES= 7;
        final int PRECIO_ABRIGOS= 15;
        final int PRECIO_ZAPATOS= 10;
    	
        do {
			
        	System.out.println("1. CAMISETAS: " + PRECIO_CAMISETAS + " €");
			System.out.println("2. PANTALONES: " + PRECIO_PANTALONES + " €");
			System.out.println("3. ABRIGOS: " + PRECIO_ABRIGOS + " €");
			System.out.println("4. ZAPATOS: " + PRECIO_ZAPATOS + " €");
			
			opcion = pedirDato("¿Qué prenda deseas vender?");
			
			
			switch (opcion) {
				case "1":
					
				break;
				
				case "2":
				break;
				
				case "3":
					break;
					
				case "4":
					break;
					
			}		
		}			
        while(!opcion.equals("0") && );
        
    	return opcion;
    }
    
    
  //FUNCION GENERICA PARA PEDIR UN DATO STRING
    public static String pedirDato (String mensaje) { 
		System.out.println(mensaje);
		String dato = sc.nextLine();
		return dato;
	}
    
    
    
  
 // Función generica que valida la longitud de un dato específico (nombre, apellido, login)
    public static String ValidarLongitud(String tipoDato) {
        String dato = "";
        
        // Pedir dato al usuario basado en el tipo que estamos validando
        do {
            dato = pedirDato(tipoDato + " (1-100 caracteres):");
            
            if (dato.length() < 1 || dato.length() > 100) {
                System.out.println("Error: El " + tipoDato + " debe tener entre 1 y 100 caracteres.");
            }
            
        } while (dato.length() < 1 || dato.length() > 100);
        
        return dato; // Devolver el dato validado
    }
    
    
   
   
 // Función generica que valida nombre o apellido
    public static String Validar(String tipoDato) {
        return ValidarLongitud(tipoDato); // Llamar a la función de validación específica
    }
    
    
    
     //FUNCION PARA VALIDAR EMAIL
    public static void validarMail() { 
    	String email= pedirDato("Email:"); //usamos funcion  para pedir dato de String
        
        // iniciamos las variables 
        tieneArroba = false;
        tienePunto = false;
        
        // recorremos el correo
        
        for (int i = 0; i< email.length(); i++) {
        	char c = email.charAt(i);
        	
        	if(c == '@') {
        		tieneArroba = true;
        	}
        	if (c == '.') {
        		tienePunto= true;
        	}
        }
        
        mailEsValido(); 
    }    
    
    
    //FUNCION VALIDAR @ Y .
    public static void mailEsValido() {
    	if ( tieneArroba && tienePunto) {
        	
        	esValido = true;
        	
        }else {
        	System.out.println("El correo no es válido");
        }
    	
    }
  
    
    //FUNCION QUE HACE EL DO WHILE QUE VALIDA email
    public static void bucleMail() { 
        String email= "";
        
        do { 
        	validarMail(); // LLAMO A LA FUNCION QUE VALIDA REQUISITOS DEL MAIL
 	    	   
        }
        while(!esValido);
        mails[contadorUsuarios] = email;
    }
 

    
    // FUNCION QUE SOLICITA UN TELEFONO VALIDO
    public static String pedirTelefonoValido() {
        String telefono;
        boolean telefonoValido;

        do {
            telefono = pedirDato("Teléfono (9 dígitos):");  //llamo a la funcion que nos da el dato del usuario
            telefonoValido = esTelefonoValido(telefono);  // llamo a la funcion que valida los caracteres (9)

            if (!telefonoValido) {
                System.out.println("Error: el teléfono debe tener exactamente 9 dígitos numéricos.");
            }

        } while (!telefonoValido);  // Continuar hasta que el teléfono sea válido

        return telefono;
    }
    
   
    
  // FUNCION PARA VALIDAR EXACTAMENTE 9 NUMEROS
    public static boolean esTelefonoValido(String telefono) {
       
    	
        if (telefono.length() != 9) { // si tlf distinto a 9 es falso
            return false;
        }

        
        for (int i = 0; i < telefono.length(); i++) { // miramos que sean numeros
           
        	if (telefono.charAt(i) < '0' || telefono.charAt(i) > '9') {
                return false;  // Si encontramos un carácter que no es numérico, es inválido
            }
        }

        return true;  // Si pasó todas las verificaciones, es válido
    }
    
    // FUNCION QUE VALIDA LOS CARACTERES DEL DNI
    public static boolean esDniValido(String dni) {
        
        if (dni.length() != 9) { //9 caracteres
            return false;
        }

        
        for (int i = 0; i < 8; i++) { // 8 primeros numeros
            if (dni.charAt(i) < '0' || dni.charAt(i) > '9') {
                return false;  // Si algún carácter no es un numero, el DNI no es valido
            }
        }

        
        char ultimoCaracter = dni.charAt(8); // ultimo carater letra
        if (!((ultimoCaracter >= 'A' && ultimoCaracter <= 'Z') || (ultimoCaracter >= 'a' && ultimoCaracter <= 'z'))) {
            return false;  // Si el último caracter no es una letra, el DNI no es valido
        }

        return true;  // Si pasó todas las verificaciones, el DNI es válido
    }
    
   
    // FUNCION QUE SOLICITA DNI
    public static String pedirDniValido() {
        String dni;
        boolean dniValido;

        do {
            dni = pedirDato("DNI: ");  // Pedir el DNI al usuario
            dniValido = esDniValido(dni);  // Verificar si el DNI es valido

            if (!dniValido) {
                System.out.println("El DNI no es válido. Inténtalo de nuevo.");
            }

        } while (!dniValido);  // Continuar pidiendo hasta que el DNI sea valido

        return dni;
    }
    
    
     //FUNCION PARA VERIFICAR LOS CARACTERES DE LA CONTRASEÑA
    public static boolean verificarCaracteresPassword(String password) {
        
        boolean tieneMayuscula = false;
        boolean tieneMinuscula = false;
        boolean tieneNumero = false;
        boolean tieneCaracterEspecial = false;

       
        for (int i = 0; i < password.length(); i++) {
            char c = password.charAt(i);

            
            if (c >= 'A' && c <= 'Z') {  // Comprobar si hay mayuscula
                tieneMayuscula = true;
            }
          
            else if (c >= 'a' && c <= 'z') {   // Comprobar si hay minusculas
                tieneMinuscula = true;
            }
            
            else if (c >= '0' && c <= '9') {   // Comprobar si es un digito
                tieneNumero = true;
            }
                                               // Comprobar si es un caracter especial
            else if (c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' ||
                    c == '*' || c == '(' || c == ')' || c == '_' || c == '+' || c == '-' ||
                    c == '|' || c == ';' || c == ':' || c == '\'' || c == '"' || c == '<' || c == '>' ||
                    c == ',' || c == '.' || c == '?' || c == '/' || c == '~' ) {
               tieneCaracterEspecial = true;
            }
        }

        // si valida todo..
        if (!tieneMayuscula || !tieneMinuscula || !tieneNumero || !tieneCaracterEspecial) {
            System.out.println("Error: El password debe incluir al menos 1 mayúscula, 1 minúscula, 1 número y 1 carácter especial.");
            return false;
        }

        return true;  // Si pasó todas las verificaciones, la contraseña es valida
    }
    
    
   // FUNCION QUE VALIDA LA CONTRASEÑA
    public static boolean esPasswordValida(String password) {
       
        if (password.length() < 8 || password.length() > 100) {   // Comprobar longitud de la contraseña
            System.out.println("Error: El password debe tener entre 8 y 100 caracteres.");
            return false;
        }

       
        if (!verificarCaracteresPassword(password)) {  // verificar que sea correcta la contraseña
            return false;
        }

        return true;  // Si pasa todas las verificaciones, la contraseña es válida
    }
    
    
    // FUNCION PARA SOLICITAR LA CONTRASEÑA
    public static String pedirPasswordValida() {
        String password;
        String passwordConfirmacion;
        boolean passwordCorrecto;

        do {
            passwordCorrecto = true;
            password = pedirDato("Password: ");  // Pedir la contraseña al usuario

           
            if (!esPasswordValida(password)) {  // que sea contraseña valida
                passwordCorrecto = false;
                System.out.println("La contraseña no cumple con los requisitos.");
            }

           
            passwordConfirmacion = pedirDato("Confirma el password: "); // confirmar la contraseña

            
            if (!password.equals(passwordConfirmacion)) { // que las contraseñas sean iguales
                passwordCorrecto = false;
                System.out.println("Error: Los passwords no coinciden.");
            }

        } while (!passwordCorrecto);  // Continuar pidiendo la contraseña hasta que sea valida

        return password;
    }
    
    
     // FUNCION PARA FECHA DE NACIMIENTO VALIDA
    public static String pedirFechaNacimientoValida() {
        String fechaNacimiento;
        boolean edadValida = false;
        boolean fechaValida;

        do {
            fechaNacimiento = pedirDato("Fecha de Nacimiento (dd/mm/yyyy): ");
            
            // Validar formato de la fecha (8 caracteres en total)
            fechaValida = (fechaNacimiento.length() == 10 && fechaNacimiento.charAt(2) == '/' && fechaNacimiento.charAt(5) == '/');
            
            if (!fechaValida) {
                System.out.println("Error: La fecha debe estar en el formato dd/mm/yyyy.");
                continue;
            }

            // Convertir fecha de nacimiento a valores numericos
            int[] fechaNac = convertirFecha(fechaNacimiento);
            int diaNacimiento = fechaNac[0];
            int mesNacimiento = fechaNac[1];
            int anoNacimiento = fechaNac[2];

            // Fecha actual simulada
            String fechaActual = "17/11/2024";
            int[] fechaAct = convertirFecha(fechaActual);
            int diaActual = fechaAct[0];
            int mesActual = fechaAct[1];
            int anoActual = fechaAct[2];

            // Calcular la edad
            int edad =calcularEdad(diaNacimiento, mesNacimiento, anoNacimiento, diaActual, mesActual, anoActual);

            // Verificar si es mayor de 18 años
            if (edad < 18) {
                System.out.println("Eres menor de edad. Debes tener al menos 18 años.");
                edadValida = false;
            } else {
                edadValida = true;
            }

            if (!edadValida) {
                System.out.println("La fecha de nacimiento no es válida.");
            }

        } while (!edadValida);  // Continuar pidiendo

        return fechaNacimiento;  // devuelvo fecha de nacimiento
    }

    //FUNCION PAR CONVERTIR A VALOR NUMERICO LA FECHA (STRING)
    public static int[] convertirFecha(String fecha) {
        int[] fechaNumerica = new int[3];  // [0] = dia, [1] = mes, [2] = año


        fechaNumerica[0] = (fecha.charAt(0) - '0') * 10 + (fecha.charAt(1) - '0');         // Convertir día

      
        fechaNumerica[1] = (fecha.charAt(3) - '0') * 10 + (fecha.charAt(4) - '0');   // Convertir mes

        
        fechaNumerica[2] = (fecha.charAt(6) - '0') * 1000 + (fecha.charAt(7) - '0') * 100 +  // Convertir año
                           (fecha.charAt(8) - '0') * 10 + (fecha.charAt(9) - '0');

        return fechaNumerica;  // devuelvo la fecha
    }
    
    // FUNCION PARA CALCULAR LA EDAD +18
    public static int calcularEdad(int diaNacimiento, int mesNacimiento, int anoNacimiento, int diaActual, int mesActual, int anoActual) {
        int edad = anoActual - anoNacimiento;

        
        if (mesNacimiento > mesActual || (mesNacimiento == mesActual && diaNacimiento > diaActual)) {
            edad--;  // Si no ha pasado el cumpleaños, restamos un año
        }

        return edad;  //devolvemos la edad
    }
    
    
    
    
}
    
   